{
  "metadata": {
    "total_chapters": 12,
    "chapters_with_content": 4
  },
  "chapters": {
    "chapter_1": {
      "number": 1,
      "name": "general",
      "content": "1.1 Overview\nThis document defines the Non‐Proprietary Security Policy for the SSH Communications Security Cryptographic Module, hereafter denoted the Module.\nThe Module meets FIPS 140‐3 overall Level 1 requirements, with security levels as shown in Section 1.2. In accordance with AS02.05, ISO/IEC 19790:2012\n§7.7 Physical Security is optional and does not apply to the Module.\n1.2 Security Levels\nSection Title Security Level"
    },
    "chapter_2": {
      "number": 2,
      "name": "cryptographic_module_specification",
      "content": ""
    },
    "chapter_3": {
      "number": 3,
      "name": "cryptographic_module_interfaces",
      "content": ""
    },
    "chapter_4": {
      "number": 4,
      "name": "roles_services_authentication",
      "content": "5 Software/Firmware security 1"
    },
    "chapter_5": {
      "number": 5,
      "name": "software_firmware_security",
      "content": ""
    },
    "chapter_6": {
      "number": 6,
      "name": "operational_environment",
      "content": ""
    },
    "chapter_7": {
      "number": 7,
      "name": "physical_security",
      "content": "8 Non‐invasive security N/A\n9 Sensitive security parameter management 1\n10 Self‐tests 1\n11 Life‐cycle assurance 3"
    },
    "chapter_8": {
      "number": 8,
      "name": "non_invasive_security",
      "content": ""
    },
    "chapter_9": {
      "number": 9,
      "name": "sensitive_security_parameters_management",
      "content": ""
    },
    "chapter_10": {
      "number": 10,
      "name": "self_tests",
      "content": ""
    },
    "chapter_11": {
      "number": 11,
      "name": "life_cycle_assurance",
      "content": ""
    },
    "chapter_12": {
      "number": 12,
      "name": "mitigation_of_other_attacks",
      "content": "Overall Level 1\nTable 1: Security Levels\n2 Cryptographic Module Specification\n2.1 Description\nPurpose and Use:\nThe Module is a cryptographic software library, intended for use by US and Canadian Federal agencies and other markets that require FIPS 140‐3 validated\ncryptographic functionality.\nThe Module design corresponds to the Module security rules. Security rules enforced by the Module are described in the appropriate context of this\ndocument.\nModule Type: Software\nModule Embodiment: MultiChipStand\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 6 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nCryptographic Boundary:\nFigure 1 depicts the Module operational environment, with the cryptographic boundary highlighted in red inclusive of all Module entry points (API calls).\nThe Module is defined as a Software module per AS02.03.\nThe pre‐operational approved integrity test is performed over all components within the cryptographic boundary.\nTested Operational Environment’s Physical Perimeter (TOEPP):\nThe General Purpose Computer is the TOEPP.\nFigure 1: Block Diagram\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 7 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n2.2 Tested and Vendor Affirmed Module Version and Identification\nTested Module Identification – Software, Firmware, Hybrid (Executable Code Sets):\nPackage or File Name Software/ Firmware Version Features Integrity Test\nfips.so 3.0.10 with KP_1.2 N/A HMAC‐SHA2‐256 #A4481 over the\ncomplete module file image\nTable 2: Tested Module Identification – Software, Firmware, Hybrid (Executable Code Sets)\nTested Operational Environments ‐ Software, Firmware, Hybrid:\nOperating System Hardware Platform Processors PAA/PAI Hypervisor or\nHost OS\nVersion(s)\nUbuntu 20.04 LTS Dell Inspiron 7591 Intel Core i7‐10510U Yes 3.0.10 with KP_1.2\nUbuntu 20.04 LTS Dell Inspiron 7591 Intel Core i7‐10510U No 3.0.10 with KP_1.2\nTable 3: Tested Operational Environments ‐ Software, Firmware, Hybrid\nVendor‐Affirmed Operational Environments ‐ Software, Firmware, Hybrid:\nOperating System Hardware Platform\nUbuntu 18.04 Dell Inspiron 7591 with Intel® Core™ i7‐10510U\nUbuntu 18.04 Dell PowerEdge R7515 with AMD EPYC 7313P\nUbuntu 22.04 LTS HPE ProLiant DL325 Gen10 Plus v2 with AMD EPYC 7313P\nUbuntu 22.04 LTS HPE ProLiant DL60 Gen9 with Intel® Xeon® E5‐2609\nCentOS 7.9 Ampere® Altra® 2U Server R272‐P33 with Ampere® Altra® SOC with Aarch64 ARMv8\nCentOS 7.9 HPE ProLiant DL60 Gen9 with Intel® Xeon® E5‐2609\nTable 4: Vendor‐Affirmed Operational Environments ‐ Software, Firmware, Hybrid\nCMVP makes no statement as to the correct operation of the Module or the security strengths of the generated keys when so ported if the specific\noperational environment is not listed on the validation certificate.\n2.3 Excluded Components\nN/A for this Module.\n2.4 Modes of Operation\nModes List and Description:\nMode Name Description Type Status Indicator\nNominal Approved mode of operation Approved\nTable 5: Modes List and Description\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 8 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nThe Module only supports an Approved mode of operation. The conditions for using the Module in the Approved mode of operation are:\n1. Installation of the Module as described in Section 11.1 results in the settings described below, which are required for operation in the Approved mode:\na. security‐checks = 1\nEnforce minimum key strengths and approved curve names.\nb. allow‐plaintext‐csp‐output = 1\nEnforce the AS09.16 and AS09.17 requirement for a second independent action to output CSPs as a result of calls that produce CSPs, such as\nkey generation, key unwrap (or decapsulate) and shared secret calculation.\nc. conditional‐errors = 1\nEnforce the Module entering the error state on conditional test errors such as PCT failure.\n2. The Module is a cryptographic library used by a calling application. The calling application is responsible for:\na. Use of the primitives in the correct sequence.\nb. Use of keys in accordance with SP 800‐140D Rev. 2 (as the keys used by the Module for cryptographic purposes are provided over the call\nstack by the calling application).\nc. Use of a SP 800‐90B compliant entropy source outside the Module boundary with at least 256 bits of security strength. Entropy is supplied to\nthe Module via callback functions. The callback functions shall return an error if the minimum entropy strength cannot be met.\n2.5 Algorithms\nApproved Algorithms:\nCipher\nAlgorithm CAVP Cert Properties Reference\nAES‐CBC A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐CBC‐CS1 A4481 Direction ‐ decrypt, encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐CBC‐CS2 A4481 Direction ‐ decrypt, encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐CBC‐CS3 A4481 Direction ‐ decrypt, encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐CCM A4481 Key Length ‐ 128, 192, 256 SP 800‐38C\nAES‐CFB1 A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐CFB128 A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐CFB8 A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 9 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm CAVP Cert Properties Reference\nAES‐CTR A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐ECB A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐GCM A4481 Direction ‐ Decrypt, Encrypt\nIV Generation ‐ External, Internal\nIV Generation Mode ‐ 8.2.1\nKey Length ‐ 128, 192, 256\nSP 800‐38D\nAES‐KW A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38F\nAES‐KWP A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38F\nAES‐OFB A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 192, 256\nSP 800‐38A\nAES‐XTS Testing Revision 2.0 A4481 Direction ‐ Decrypt, Encrypt\nKey Length ‐ 128, 256\nSP 800‐38E\nTable 6: Approved Algorithms ‐ Cipher\nKey agreement\nAlgorithm CAVP Cert Properties Reference\nKAS‐ECC CDH‐Component\nSP800‐56Ar3 (CVL)\nA4481 Curve ‐ B‐233, B‐283, B‐409, B‐571, K‐233, K‐283, K‐409, K‐571, P‐224, P‐256, P‐384, P‐521 SP 800‐56A\nRev. 3\nKAS‐ECC‐SSC Sp800‐56Ar3 A4481 Domain Parameter Generation Methods ‐ B‐233, B‐283, B‐409, B‐571, K‐233, K‐283, K‐409, K‐571, P‐224,\nP‐256, P‐384, P‐521\nScheme ‐ephemeralUnified ‐\nKAS Role ‐ initiator, responder\nSP 800‐56A\nRev. 3\nKAS‐FFC‐SSC Sp800‐56Ar3 A4481 Domain Parameter Generation Methods ‐ FB, FC, ffdhe2048, ffdhe3072, ffdhe4096, ffdhe6144, ffdhe8192,\nmodp‐2048, modp‐3072, modp‐4096, modp‐6144, modp‐8192\nScheme ‐dhEphem ‐\nKAS Role ‐ initiator, responder\nSP 800‐56A\nRev. 3\nKAS‐IFC‐SSC A4481 Modulo ‐ 2048, 3072, 4096, 6144, 8192\nKey Generation Methods ‐ rsakpg1‐basic, rsakpg1‐crt, rsakpg1‐prime‐factor, rsakpg2‐basic, rsakpg2‐crt,\nrsakpg2‐prime‐factor\nScheme ‐KAS1 ‐\nKAS Role ‐ initiator, responder\nScheme ‐KAS2 ‐\nKAS Role ‐ initiator, responder\nSP 800‐56A\nRev. 3\nTable 7: Approved Algorithms ‐ Key agreement\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 10 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nKey derivation\nAlgorithm CAVP Cert Properties Reference\nKDA HKDF SP800‐56Cr2 A4481 Derived Key Length ‐ 2048\nShared Secret Length ‐ Shared Secret Length: 224‐8192 Increment 8\nHMAC Algorithm ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256,\nSHA3‐224, SHA3‐256, SHA3‐384, SHA3‐512\nSP 800‐56C\nRev. 2\nKDA OneStep SP800‐56Cr2 A4481 Derived Key Length ‐ 2048\nShared Secret Length ‐ Shared Secret Length: 224‐8192 Increment 8\nSP 800‐56C\nRev. 2\nKDA TwoStep SP800‐56Cr2 A4481 MAC Salting Methods ‐ default, random\nKDF Mode ‐ feedback\nDerived Key Length ‐ 2048\nShared Secret Length ‐ Shared Secret Length: 224‐8192 Increment 8\nSP 800‐56C\nRev. 2\nKDF ANS 9.42 (CVL) A4481 KDF Type ‐ DER\nHash Algorithm ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256, SHA3‐\n224, SHA3‐256, SHA3‐384, SHA3‐512\nKey Data Length ‐ Key Data Length: 8‐4096 Increment 8\nSP 800‐135\nRev. 1\nKDF ANS 9.63 (CVL) A4481 Hash Algorithm ‐ SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512\nKey Data Length ‐ Key Data Length: 128, 4096\nSP 800‐135\nRev. 1\nKDF SP800‐108 A4481 KDF Mode ‐ Counter, Feedback\nSupported Lengths ‐ Supported Lengths: 8, 72, 128, 776, 3456, 4096\nSP 800‐108\nRev. 1\nKDF SSH (CVL) A4481 Cipher ‐ AES‐128, AES‐192, AES‐256\nHash Algorithm ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512\nSP 800‐135\nRev. 1\nPBKDF A4481 Iteration Count ‐ Iteration Count: 1‐10000 Increment 1\nPassword Length ‐ Password Length: 8‐128 Increment 8\nSP 800‐132\nTLS v1.2 KDF RFC7627 (CVL) A4481 Hash Algorithm ‐ SHA2‐256, SHA2‐384, SHA2‐512 SP 800‐135\nRev. 1\nTLS v1.3 KDF (CVL) A4481 HMAC Algorithm ‐ SHA2‐256, SHA2‐384\nKDF Running Modes ‐ DHE, PSK, PSK‐DHE\nSP 800‐135\nRev. 1\nTable 8: Approved Algorithms ‐ Key derivation\nKey management\nAlgorithm CAVP Cert Properties Reference\nDSA KeyGen (FIPS186‐4) A4481 L ‐ 2048, 3072\nN ‐ 224, 256\nFIPS 186‐4\nDSA PQGGen (FIPS186‐4) A4481 L ‐ 2048, 3072\nN ‐ 224, 256\nHash Algorithm ‐ SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nFIPS 186‐4\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 11 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm CAVP Cert Properties Reference\nDSA PQGVer (FIPS186‐4) A4481 L ‐ 1024, 2048, 3072\nN ‐ 160, 224, 256\nHash Algorithm ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nFIPS 186‐4\nECDSA KeyGen (FIPS186‐4) A4481 Curve ‐ B‐233, B‐283, B‐409, B‐571, K‐233, K‐283, K‐409, K‐571, P‐224, P‐256, P‐384, P‐521\nSecret Generation Mode ‐ Testing Candidates\nFIPS 186‐4\nECDSA KeyVer (FIPS186‐4) A4481 Curve ‐ B‐163, B‐233, B‐283, B‐409, B‐571, K‐163, K‐233, K‐283, K‐409, K‐571, P‐192, P‐224, P‐256, P‐384,\nP‐521\nFIPS 186‐4\nEDDSA KeyGen A4481 Curve ‐ ED‐25519, ED‐448 FIPS 186‐5\nEDDSA KeyVer A4481 Curve ‐ ED‐25519, ED‐448 FIPS 186‐5\nSafe Primes Key Generation A4481 Safe Prime Groups ‐ ffdhe2048, ffdhe3072, ffdhe4096, ffdhe6144, ffdhe8192, modp‐2048, modp‐3072,\nmodp‐4096, modp‐6144, modp‐8192\nSP 800‐56A\nRev. 3\nSafe Primes Key Verification A4481 Safe Prime Groups ‐ ffdhe2048, ffdhe3072, ffdhe4096, ffdhe6144, ffdhe8192, modp‐2048, modp‐3072,\nmodp‐4096, modp‐6144, modp‐8192\nSP 800‐56A\nRev. 3\nRSA KeyGen (FIPS186‐4) A4481 Key Generation Mode ‐ B.3.3\nModulo ‐ 2048, 3072, 4096\nPrimality Tests ‐ Table C.2\nPrivate Key Format ‐ Standard\nFIPS 186‐4\nTable 9: Approved Algorithms ‐ Key management\nKey transport\nAlgorithm CAVP Cert Properties Reference\nKTS‐IFC A4481 Modulo ‐ 2048, 3072, 4096, 6144\nKey Generation Methods ‐ rsakpg1‐basic, rsakpg1‐crt, rsakpg1‐prime‐factor, rsakpg2‐basic, rsakpg2‐crt,\nrsakpg2‐prime‐factor\nScheme ‐KTS‐OAEP‐basic ‐\nKAS Role ‐ initiator, responder\nKey Transport Method ‐\nKey Length ‐ 1024\nSP 800‐56B\nRev. 2\nTable 10: Approved Algorithms ‐ Key transport\nMessage authentication\nAlgorithm CAVP Cert Properties Reference\nAES‐CMAC A4481 Direction ‐ Generation, Verification\nKey Length ‐ 128, 192, 256\nSP 800‐38B\nAES‐GMAC A4481 Direction ‐ Decrypt, Encrypt\nIV Generation ‐ External, Internal\nIV Generation Mode ‐ 8.2.1\nKey Length ‐ 128, 192, 256\nSP 800‐38D\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 12 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm CAVP Cert Properties Reference\nHMAC‐SHA‐1 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA2‐224 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA2‐256 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA2‐384 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA2‐512 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA2‐512/224 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA2‐512/256 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA3‐224 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA3‐256 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA3‐384 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nHMAC‐SHA3‐512 A4481 Key Length ‐ Key Length: 112‐2048 Increment 8 FIPS 198‐1\nKMAC‐128 A4481 Message Length ‐ Message Length: 0‐65536 Increment 8\nKey Data Length ‐ Key Data Length: 128‐1024 Increment 8\nSP 800‐185\nKMAC‐256 A4481 Message Length ‐ Message Length: 0‐65536 Increment 8\nKey Data Length ‐ Key Data Length: 128‐1024 Increment 8\nSP 800‐185\nTable 11: Approved Algorithms ‐ Message authentication\nMessage digest\nAlgorithm CAVP Cert Properties Reference\nSHA‐1 A4481 Message Length ‐ Message Length: 0‐65528 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 180‐4\nSHA2‐224 A4481 Message Length ‐ Message Length: 0‐65528 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 180‐4\nSHA2‐256 A4481 Message Length ‐ Message Length: 0‐65528 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 180‐4\nSHA2‐384 A4481 Message Length ‐ Message Length: 0‐65528 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 180‐4\nSHA2‐512 A4481 Message Length ‐ Message Length: 0‐65528 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 180‐4\nSHA2‐512/224 A4481 Message Length ‐ Message Length: 0‐65528 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 180‐4\nSHA2‐512/256 A4481 Message Length ‐ Message Length: 0‐65528 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 180‐4\nSHA3‐224 A4481 Message Length ‐ Message Length: 0‐65536 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 202\nSHA3‐256 A4481 Message Length ‐ Message Length: 0‐65536 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 202\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 13 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm CAVP Cert Properties Reference\nSHA3‐384 A4481 Message Length ‐ Message Length: 0‐65536 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 202\nSHA3‐512 A4481 Message Length ‐ Message Length: 0‐65536 Increment 8\nLarge Message Sizes ‐ 1, 2, 4, 8\nFIPS 202\nSHAKE‐128 A4481 Output Length ‐ Output Length: 16‐65536 Increment 8 FIPS 202\nSHAKE‐256 A4481 Output Length ‐ Output Length: 16‐65536 Increment 8 FIPS 202\nTable 12: Approved Algorithms ‐ Message digest\nRandom\nAlgorithm CAVP Cert Properties Reference\nCounter DRBG A4481 Prediction Resistance ‐ Yes\nMode ‐ AES‐128, AES‐192, AES‐256\nDerivation Function Enabled ‐ No, Yes\nSP 800‐90A\nRev. 1\nHash DRBG A4481 Prediction Resistance ‐ Yes\nMode ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nSP 800‐90A\nRev. 1\nHMAC DRBG A4481 Prediction Resistance ‐ Yes\nMode ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nSP 800‐90A\nRev. 1\nTable 13: Approved Algorithms ‐ Random\nSignature\nAlgorithm CAVP Cert Properties Reference\nECDSA SigGen (FIPS186‐4) A4481 Component ‐ No, Yes\nCurve ‐ B‐233, B‐283, B‐409, B‐571, K‐233, K‐283, K‐409, K‐571, P‐224, P‐256, P‐384, P‐521\nHash Algorithm ‐ SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nFIPS 186‐4\nECDSA SigVer (FIPS186‐4) A4481 Component ‐ No\nCurve ‐ B‐163, B‐233, B‐283, B‐409, B‐571, K‐163, K‐233, K‐283, K‐409, K‐571, P‐192, P‐224, P‐256, P‐384,\nP‐521\nHash Algorithm ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nFIPS 186‐4\nDSA SigGen (FIPS186‐4) A4481 L ‐ 2048, 3072\nN ‐ 224, 256\nHash Algorithm ‐ SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nFIPS 186‐4\nDSA SigVer (FIPS186‐4) A4481 L ‐ 1024, 2048, 3072\nN ‐ 160, 224, 256\nHash Algorithm ‐ SHA‐1, SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256\nFIPS 186‐4\nEDDSA SigGen A4481 Curve ‐ ED‐25519, ED‐448 FIPS 186‐5\nEDDSA SigVer A4481 Curve ‐ ED‐25519, ED‐448 FIPS 186‐5\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 14 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm CAVP Cert Properties Reference\nRSA SigGen (FIPS186‐4) A4481 Signature Type ‐ ANSI X9.31, PKCS 1.5, PKCSPSS\nModulo ‐ 2048, 3072, 4096\nFIPS 186‐4\nRSA SigGen (FIPS186‐5) A4481 Modulo ‐ 2048, 3072, 4096\nSignature Type ‐ pkcs1v1.5, pss\nFIPS 186‐5\nRSA Signature Primitive (CVL) A4481 Private Key Format ‐ crt FIPS 186‐4\nRSA SigVer (FIPS186‐4) A4481 Signature Type ‐ ANSI X9.31, PKCS 1.5, PKCSPSS\nModulo ‐ 1024, 2048, 3072, 4096\nFIPS 186‐4\nRSA SigVer (FIPS186‐5) A4481 Modulo ‐ 2048, 3072, 4096\nSignature Type ‐ pkcs1v1.5, pss\nFIPS 186‐5\nTable 14: Approved Algorithms ‐ Signature\nVendor‐Affirmed Algorithms:\nName Properties Implementation Reference\nCKG Section 4 KeyPair FIPS Provider for OpenSSL 3 NIST, SP 800‐133 Rev. 2\nCKG Section 5 KeyPair FIPS Provider for OpenSSL 3 NIST, SP 800‐133 Rev. 2\nCKG Section 6.2 KeyPair FIPS Provider for OpenSSL 3 NIST, SP 800‐133 Rev. 2\nHash DRBG with SHA3‐256, SHA3‐512 KeyPair FIPS Provider for OpenSSL 3 NIST, SP 800‐90A Rev. 1\nHMAC DRBG with SHA3‐256, SHA3‐512 KeyPair FIPS Provider for OpenSSL 3 NIST, SP 800‐90A Rev. 1\nTable 15: Vendor‐Affirmed Algorithms\nNon‐Approved, Allowed Algorithms:\nN/A for this module.\nNon‐Approved, Allowed Algorithms with No Security Claimed:\nN/A for this Module.\nNon‐Approved, Not Allowed Algorithms:\nN/A for this Module.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 15 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n2.6 Security Function Implementations\nName Type Description Properties Algorithms\nCipher (Unauth) BC‐UnAuth AES ciphers AES‐CBC\nAES‐CBC‐CS1\nAES‐CBC‐CS2\nAES‐CBC‐CS3\nAES‐CFB1\nAES‐CFB128\nAES‐CFB8\nAES‐CTR\nAES‐ECB\nAES‐OFB\nAES‐XTS Testing Revision 2.0\nCipher (Auth) BC‐Auth Authenticated ciphers AES‐CCM\nAES‐GCM\nAES‐KW\nAES‐KWP\nCKG Section 4 CKG Using the Output of a\nRandom Bit Generator\nCKG Section 4\nCKG Section 5 CKG Generation of Key Pairs for\nAsymmetric‐Key Algorithms\nCKG Section 5\nCKG Section 6.2 CKG Derivation of Symmetric\nKeys\nCKG Section 6.2\nKey agreement KAS‐SSC Key agreement KAS:KAS‐ECC‐SSC provides between 112\nand 256 bits of encryption strength; KAS‐\nFFC‐SSC provides between 112 and 200\nbits of encryption strength; KAS‐IFC‐SSC\nprovides between 112 and 200 bits of\nencryption strength\nKAS‐ECC CDH‐Component\nSP800‐56Ar3\nKAS‐ECC‐SSC Sp800‐56Ar3\nKAS‐FFC‐SSC Sp800‐56Ar3\nKAS‐IFC‐SSC\nKey derivation KAS‐135KDF\nKAS‐56CKDF\nKBKDF\nPBKDF\nKAS‐KDF HKDF SP800‐56Cr2\nKAS‐KDF OneStep SP800‐56Cr2\nKAS‐KDF TwoStep SP800‐56Cr2\nKDF ANS 9.42\nKDF ANS 9.63\nKDF SP800‐108\nKDF SSH\nPBKDF\nTLS v1.2 KDF RFC7627\nTLS v1.3 KDF\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 16 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Type Description Properties Algorithms\nKey management ECC AsymKeyPair‐KeyGen\nAsymKeyPair‐KeyVer\nECDSA KeyGen (FIPS186‐4)\nECDSA KeyVer (FIPS186‐4)\nKey management Edwards AsymKeyPair‐KeyGen\nAsymKeyPair‐KeyVer\nEDDSA KeyGen\nEDDSA KeyVer\nKey management FFC AsymKeyPair‐KeyGen DSA KeyGen (FIPS186‐4)\nDSA PQGGen (FIPS186‐4)\nDSA PQGVer (FIPS186‐4)\nSafe Primes Key Generation\nSafe Primes Key Verification\nKey management IFC AsymKeyPair‐KeyGen RSA KeyGen (FIPS186‐4)\nKey transport KTS‐Encap KTS:2048, 3072, 4096 or 6144‐bit keys\nprovide between 112 and 176 bits of\nencryption strength\nKTS‐IFC\nKTS (Cipher w/ CMAC, GMAC,\nHMAC, KMAC)\nBC‐Auth\nBC‐UnAuth\nMAC\nSP 800‐38F Section 3.1\nProvisions\nKTS:128, 192 or 256‐bit keys provide\nbetween 128 and 256 bits of encryption\nstrength\nAES‐CBC\nAES‐CBC‐CS1\nAES‐CBC‐CS2\nAES‐CBC‐CS3\nAES‐CFB1\nAES‐CFB128\nAES‐CFB8\nAES‐CTR\nAES‐ECB\nAES‐OFB\nAES‐CCM\nAES‐GCM\nAES‐GMAC\nAES‐CMAC\nHMAC‐SHA‐1\nHMAC‐SHA2‐224\nHMAC‐SHA2‐256\nHMAC‐SHA2‐384\nHMAC‐SHA2‐512\nHMAC‐SHA2‐512/224\nHMAC‐SHA2‐512/256\nHMAC‐SHA3‐224\nHMAC‐SHA3‐256\nHMAC‐SHA3‐384\nHMAC‐SHA3‐512\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 17 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Type Description Properties Algorithms\nKMAC‐128\nKMAC‐256\nKTS (AES KW, KWP) BC‐Auth KTS:128, 192 or 256‐bit keys provide\nbetween 128 and 256 bits of encryption\nstrength\nAES‐KW\nAES‐KWP\nMAC AES (CMAC, GMAC) MAC AES‐GMAC\nAES‐CMAC\nMAC HMAC MAC HMAC‐SHA‐1\nHMAC‐SHA2‐224\nHMAC‐SHA2‐256\nHMAC‐SHA2‐384\nHMAC‐SHA2‐512\nHMAC‐SHA2‐512/224\nHMAC‐SHA2‐512/256\nHMAC‐SHA3‐224\nHMAC‐SHA3‐256\nHMAC‐SHA3‐384\nHMAC‐SHA3‐512\nMAC KMAC (XOF) XOF KMAC‐128\nKMAC‐256\nMessage Digest SHA SHA‐1\nSHA2‐224\nSHA2‐256\nSHA2‐384\nSHA2‐512\nSHA2‐512/224\nSHA2‐512/256\nSHA3‐224\nSHA3‐256\nSHA3‐384\nSHA3‐512\nMessage Digest (XOF SHAKE) XOF SHAKE‐128\nSHAKE‐256\nRandom DRBG Counter DRBG\nHash DRBG\nHMAC DRBG\nSignature DSA DigSig‐SigGen\nDigSig‐SigVer\nDSA SigGen (FIPS186‐4)\nDSA SigVer (FIPS186‐4)\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 18 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Type Description Properties Algorithms\nSignature ECDSA DigSig‐SigGen\nDigSig‐SigVer\nECDSA SigGen (FIPS186‐4)\nECDSA SigVer (FIPS186‐4)\nSignature EDDSA DigSig‐SigGen\nDigSig‐SigVer\nEDDSA SigGen\nEDDSA SigVer\nSignature RSA DigSig‐SigGen\nDigSig‐SigVer\nRSA SigGen (FIPS186‐4)\nRSA SigGen (FIPS186‐5)\nRSA Signature Primitive\nRSA SigVer (FIPS186‐4)\nRSA SigVer (FIPS186‐5)\nTable 16: Security Function Implementations\n2.7 Algorithm Specific Information\nAES‐GCM:\nThe Module supports internal IV generation using the Approved DRBG. The IV is at least 96 bits in length per SP 800‐38D Section 8.2.2, and the Approved\nDRBG generates outputs such that the (key, IV) pair collision probability is less than 2‐32\nper SP 800‐38D Section 8.\nAES‐GCM IVs shall be used in compliance with FIPS 140‐3 IG C.H scenario 1a (TLS/DTLS 1.2, per RFC 5288), 1d (SSHv2, per RFC 5647) and 5 (TLS 1.3, per\nRFC 8446). The Module is compatible with TLS/DTLS 1.2 protocol and provides the primitives to support the AES GCM ciphersuites from SP 800‐52 Rev. 1\nSection 3.3.1. The Module’s implementation of AES‐GCM is used together with one or more applications outside the Module’s cryptographic boundary\nthat implement the specified protocols; these protocols have not been reviewed or tested by the CAVP and CMVP. In each of the protocols, if the Module’s\npower is lost and then restored, the key used for the AES GCM encryption/decryption shall be re‐distributed. This condition is not enforced by the Module\nbut is met implicitly. The Module does not retain any state across reset or power‐cycles: AES‐GCM key/IVs are not stored in non‐volatile persistent memory\n(i.e., disk), hence no re‐connection can occur without a fresh key establishment operation and the associated SSPs.\nThe Module explicitly ensures that the counter (the nonce_explicit part of the IV) does not exhaust the maximum number of possible values of 264\n‐1 for a\ngiven session key. If this exhaustion condition is observed, the Module returns an error indication to the calling application, which will then need to either\nabort the connection, or trigger a handshake to establish a new encryption key.\nXTS‐AES:\nIn accordance with SP 800‐38E, the XTS‐AES algorithm is to be used for confidentiality on storage devices. The Module complies with FIPS 140‐3 IG C.I by:\n Generating Key_1 and Key_2 independently according to the rules for component symmetric keys from SP 800‐133 Rev. 2, Section 6.3.\n Explicitly checking that Key_1 ≠ Key_2 before using the keys in the XTS‐AES algorithm to process data with them.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 19 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nKey Agreement:\nThe Module implements the following Approved key agreement methods which have been CAVP tested and validated:\n KAS‐ECC‐SSC per SP 800‐56A Rev. 3 (FIPS 140‐3 IG D.F Scenario 2, path 1).\n KAS‐FFC‐SSC per SP 800‐56A Rev. 3 (FIPS 140‐3 IG D.F Scenario 2, path 1).\n KAS‐IFC‐SSC per SP 800‐56B Rev. 2 (FIPS 140‐3 IG D.F Scenario 1, path 1).\nThe Module obtains the FIPS 140‐3 IG D.F required key agreement assurances:\n SP 800‐56A Rev. 3 in accordance with Section 5.6.2.\n SP 800‐56B Rev. 2 in accordance with Section 6.4.\nPBKDF:\nThe implemented PBKDF uses Option 1a specified in SP 800‐132 Section 5.4.\nFIPS 140‐3 IG D.N SP 800‐132 Password‐Based Key Derivation for Storage Applications notes that:\nThe strength of the Data Protection Key is based on the strength of the Password and/or Passphrase used in key derivation. SP 800‐132 does not impose\nany strictly defined requirements on the strength of a password. It says that “passwords should be strong enough so that it is infeasible for attackers to\nget access by guessing a password.”\nThe choice to use the PBKDF with a password or passphrase is entirely outside the scope of the Module, managed by the calling application – and potentially\nwould need to accommodate not only application‐level considerations, but end use environment considerations and policies as well. As examples, the end\nuse environment may impose policies to reject words found in a dictionary, to use specific types of characters (upper case, lower case, punctuation) and\nso on. The Module does not enforce a reduced character space (referring to the set of allowed characters), and as such, any policy to restrict the character\nspace weakens the potential strength of the derived Data Protection Key (KD_PW_PBKDF).\nIn the summary of password strength guidance below, the term useful refers to characters which are not simply padding the string, for example with some\ncombination of repetitive characters – such means of skirting organizational policies are not recommended. The phrase character space refers to the set\nof characters that a password or passphrase is constrained to. The printable character space is assumed to be 95 printable characters.\nIntegrators making use of PBKDF with this Module shall determine password policy and input length based on the intended output key size and strength,\ntaking into consideration the probability of guessing KD_PW_PBKDF. The following examples are provided to guide parameter selection:\n 1/(2256\n) = 8.6E‐78 for a 32‐byte KD_PW_PBKDF field with no character space restriction (equivalent to a 256‐bit symmetric key).\n 1/(9518\n) = 2.5E‐36 for KD_PW_PBKDF with 18 useful printable characters (better than a 112‐bit symmetric key, i.e. 1/(2112\n) = 1.9E‐34).\n 1/(9520\n) = 3.4E‐48 for KD_PW_PBKDF with 20 useful printable characters (better than a 128‐bit symmetric key, i.e. 1/(2128\n) = 2.9E‐39).\n 1/(9540\n) = 7.8E‐80 for KD_PW_PBKDF with 40 useful printable characters (better than a 256‐bit symmetric key, i.e. 1/(2256\n) = 8.6E‐78).\nIn accordance with SP 800‐132 and FIPS 140‐3 IG D.N, keys derived from passwords are only to be used in storage applications.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 20 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nThe iteration count shall be selected as large as possible, as long as the time required to generate the key using the entered password is acceptable for\nthe users. The Module enforces the following SP 800‐132 compliance checks:\n The iteration count is at least 1000.\n The salt length is at least 128 bits.\n The derived key length is at least 112 bits.\nRSA:\nThe Module complies with FIPS 140‐3 IG C.F as follows:\n RSA Key Generation, Signature Generation and Signature Verification have been tested and validated with all implemented modulus lengths for\nwhich CAVP testing is available: k = 1024 (legacy Signature Verification only), k = 2048, k = 3072, and k = 4096.\n The Module also supports RSA Key Generation, Signature Generation and Signature Verification with modulus lengths for which CAVP testing is\nnot available: k > 4096.\nSHA‐3 and SHAKE:\nThe Module complies with FIPS 140‐3 IG C.C as follows:\n All implemented SHA‐3 and SHAKE functions have been tested and validated on all of the Module’s operating environments.\n Vendor affirmation is claimed for use of the SHA3‐256 and SHA3‐512 hash functions as part of the Hash DRBG and HMAC DRBG, for which CAVP\ntesting with SHA‐3 is not available.\n2.8 RBG and Entropy\nN/A for this Module. The calling application is responsible for use of a SP 800‐90B compliant entropy source outside the Module boundary providing at\nleast 256 bits of security strength. Entropy is supplied to the Module via callback functions. The following caveat applies per FIPS 140‐3 IG 9.3.A:\nNo assurance of the minimum strength of generated SSPs (e.g., keys).\n2.9 Key Generation\nThe Module:\n Produces random values in accordance with SP 800‐133 Rev. 2 Section 4, in that the DRBG output is provided directly as the random output.\n Does not provide any service beyond random value generation for symmetric key generation. SSPs used with symmetric key algorithms are\nprovided by the calling application.\n Produces asymmetric keys in accordance with SP 800‐133 Rev. 2 Section 5, in that all asymmetric keys generated by the Module (the Key\nmanagement service) provide the output of the approved key generation algorithm with no post‐processing or manipulation of the generated key\npairs. As noted in the previous item, random values used in the asymmetric key generation algorithms are direct outputs of the DRBG. Keys\nproduced by the Module use an internal Counter DRBG for which the minimum key size and equivalent security strength is 128 bits.\n Supports symmetric key derivation in accordance with SP 800‐133 Rev. 2 Section 6.2, using the approved and CAVP listed KDF algorithms.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 21 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n2.10 Key Establishment\nThe Module implements key agreement methods compliant with FIPS 140‐3 IG D.F and key transport methods compliant with FIPS 140‐3 IG D.G. Strengths\nare provided in Section 2.6.\n2.11 Industry Protocols\nThe Module conforms to FIPS 140‐3 IG D.C References to the Support of Industry Protocols: while it provides SP 800‐56A Rev. 3 conformant schemes and\nAPI entry points oriented to TLS usage, the Module does not contain the full implementation of TLS. The following caveat is required:\nNo parts of the TLS protocol, other than the approved cryptographic algorithms and the KDFs, have been tested by the CAVP and CMVP.\n3 Cryptographic Module Interfaces\n3.1 Ports and Interfaces\nPhysical Port Logical Interface(s) Data That Passes\nN/A (API ‐ input) Control Input\nData Input\nAPI input: stack frame including non‐sensitive parameters.\nN/A (API ‐ output) Data Output\nStatus Output\nAPI output: output parameters and return value resulting from call execution.\nTable 17: Ports and Interfaces\nThe Module does not interact with physical ports. The Control Output interface is not applicable, as the Module does not control other components.\n4 Roles, Services, and Authentication\n4.1 Authentication Methods\nN/A for this Module.\n4.2 Roles\nName Type Operator Type Authentication Methods\nCO Role CO\nTable 18: Roles\nThe Module supports the mandatory Cryptographic Officer (CO) operational role only (implicitly identified), and does not support a maintenance role or a\nbypass capability. The Module does not provide an authentication or identification method of its own. The CO role is assumed by meeting the conditions\nof Section 11 of this document and in associated Guidance Documentation.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 22 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n4.3 Approved Services\nName Description Indicator Inputs Outputs Security Functions SSP Access\nCipher Encrypt or decrypt data,\nincluding AEAD modes\n(CCM, GCM).\nFIPS_OK Encryption or decryption\nkey; plaintext or ciphertext\ndata; flags.\nStatus return. Plaintext\nor ciphertext data.\nCipher (Unauth)\nCipher (Auth)\nCO\n‐ SC_EDK_AES: W,E\n‐ SC_EDK_XTS: W,E\nGet capabilities Reports information on the\nrequested capabilities.\nFIPS_OK Provider context, capability,\ncallback pointer and\narguments.\nDescription of\ncapabilities.\nInitialize Module initialization,\nincluding instantiation of\nthe opaque (managed\nwithin the module) Counter\nDRBG instance.\nFIPS_OK Core handle, dispatch in and\nout, provider context.\nInitialization status (1 =\npass, 0 = fail).\nRandom\nMAC HMAC\nCO\n‐ DRBG_EI: W,E,Z\n‐ DRBG_Seed: G,E,Z\n‐ DRBG_Key: G,W,E\n‐ DRBG_V: G,W,E\nKey agreement Perform key agreement\nprimitives on behalf of the\ncalling process (does not\nestablish keys into the\nmodule).\nFIPS_OK Key structs (key agreement\nkeys); flags.\nStatus return; key\nagreement shared\nsecret.\nCKG Section 5\nKey agreement\nCO\n‐ KAS_Private_ECC: W,E\n‐ KAS_Public_ECC: W,E\n‐ KAS_Private_FFC: W,E\n‐ KAS_Public_FFC: W,E\n‐ KAS_Private_IFC: W,E\n‐ KAS_Public_IFC: W,E\n‐ KAS_SS_ECC: G,R\n‐ KAS_SS_FFC: G,R\n‐ KAS_SS_IFC: G,R\nKey derivation Derive keying material from\na shared secret.\nFIPS_OK Key agreement shared\nsecret; flags.\nStatus return; derived\nkeying material.\nKey derivation\nCKG Section 6.2\nCO\n‐ KD_DKM_KDF: G,R\n‐ KD_PW_PBKDF: W,E\n‐ KD_DKM_PBKDF: G,R\n‐ KD_SK: W,E\nKey management Generate asymmetric key\npairs.\nFIPS_OK ECDSA, EdDSA: curve\nidentifier. DSA, RSA: domain\nparameter targets.\nStatus return; general\ndigital signature\nprivate and public\nkeys.\nKey management\nECC\nKey management\nEdwards\nKey management\nFFC\nKey management IFC\nCKG Section 4\nCO\n‐ DRBG_C: G,W,E\n‐ DRBG_Key: W,G,E\n‐ DRBG_V: W,G,E\n‐ GKP_Private_ECC: G,R\n‐ GKP_Public_ECC: G,R\n‐ GKP_Private_Edwards: G,R\n‐ GKP_Public_Edwards: G,R\n‐ GKP_Private_FFC: G,R\n‐ GKP_Public_FFC: G,R\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 23 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Description Indicator Inputs Outputs Security Functions SSP Access\n‐ GKP_Private_IFC: G,R\n‐ GKP_Public_IFC: G,R\nKey transport Encapsulate or decapsulate\nkey material on behalf of\nthe calling process.\nFIPS_OK Key encapsulation/\ndecapsulation key or Key\nwrap/unwrap key.\nStatus return; key\ntransport shared\nsecret.\nCKG Section 5\nKey transport\nKTS (Cipher w/\nCMAC, GMAC,\nHMAC, KMAC)\nKTS (AES KW, KWP)\nCO\n‐ KTS_KDK_IFC: W,E\n‐ KTS_KEK_IFC: W,E\n‐ KTS_SS_IFC: G,R\nMessage\nauthentication\nGenerate or verify data\nintegrity.\nFIPS_OK Keyed hash key. Status return; MAC\noutput value.\nMAC AES (CMAC,\nGMAC)\nMAC HMAC\nMAC KMAC (XOF)\nCO\n‐ KH_Key_AES‐CMAC: W,E\n‐ KH_Key_AES‐GMAC: W,E\n‐ KH_Key_HMAC: W,E\n‐ KH_Key_KMAC: W,E\nMessage digest Generate a message digest. FIPS_OK Message; flags. Status return; Hash\noutput value.\nMessage Digest\nMessage Digest (XOF\nSHAKE)\nQuery Report available crypto\noperations.\nFIPS_OK Provider context, operation\nID.\nArray of available\noperations.\nRandom Generate random bits using\nthe DRBG.\nFIPS_OK DRBG struct (RBG State);\nDRBG_Seed.\nStatus return; Random\nvalue.\nRandom\nCKG Section 4\nCO\n‐ DRBG_C: W,E\n‐ DRBG_EI: W,E,Z\n‐ DRBG_Seed: G,E,Z\n‐ DRBG_Key: W,E\n‐ DRBG_V: W,E\nSelf‐test Perform the self‐test\nsequence.\nFIPS_OK Provider context. Status (1 = pass, 0 =\nfail).\nShow module\nname and\nversioning\ninformation\nReturn module name and\nversioning information.\nFIPS_OK Provider context, parameter\ntypes (array).\nParameter types\n(array) with: Name,\nVersion.\nShow status OpenSSL core metadata\n(Gettable parameters; Get\nparameters).\nFIPS_OK Provider context, parameter\ntypes (array).\nParameter types with:\nBuildInfo, Status,\nSecurityChecks; Status\nreturn.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 24 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Description Indicator Inputs Outputs Security Functions SSP Access\nSignature Generate or verify digital\nsignatures. (SSPs are passed\nin by the calling process.)\nFIPS_OK Sign: signing key; message.\nVerify: signature value;\nflags; sizes.\nStatus return;\nSignature value.\nCKG Section 5\nSignature DSA\nSignature ECDSA\nSignature EDDSA\nSignature RSA\nCO\n‐ DS_SGK_ECC: W,E\n‐ DS_SVK_ECC: W,E\n‐ DS_SGK_Edwards: W,E\n‐ DS_SVK_Edwards: W,E\n‐ DS_SGK_FFC: W,E\n‐ DS_SVK_FFC: W,E\n‐ DS_SGK_IFC: W,E\n‐ DS_SVK_IFC: W,E\nTeardown Uninstantiate the module;\nzeroizes internal CTR DRBG\nstate (DRBG_Key, DRBG_V).\nFIPS_OK Provider context. None. CO\n‐ DRBG_Key: Z\n‐ DRBG_V: Z\nZeroize Zeroization of allocated key\nstructures using\nopenssl_cleanse.\nFIPS_OK Memory pointer. Void. CO\n‐ DRBG_C: Z\n‐ DRBG_EI: Z\n‐ DRBG_Key: Z\n‐ DRBG_Seed: Z\n‐ DRBG_V: Z\n‐ DS_SGK_ECC: Z\n‐ DS_SGK_Edwards: Z\n‐ DS_SGK_FFC: Z\n‐ DS_SGK_IFC: Z\n‐ DS_SVK_ECC: Z\n‐ DS_SVK_Edwards: Z\n‐ DS_SVK_FFC: Z\n‐ DS_SVK_IFC: Z\n‐ GKP_Private_ECC: Z\n‐ GKP_Private_Edwards: Z\n‐ GKP_Private_FFC: Z\n‐ GKP_Private_IFC: Z\n‐ GKP_Public_ECC: Z\n‐ GKP_Public_Edwards: Z\n‐ GKP_Public_FFC: Z\n‐ GKP_Public_IFC: Z\n‐ KAS_Private_ECC: Z\n‐ KAS_Private_FFC: Z\n‐ GKP_Private_ECC: Z\n‐ KAS_Private_IFC: Z\n‐ KAS_Public_ECC: Z\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 25 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Description Indicator Inputs Outputs Security Functions SSP Access\n‐ KAS_Public_FFC: Z\n‐ KAS_Public_IFC: Z\n‐ KAS_SS_ECC: Z\n‐ KD_DKM_KDF: Z\n‐ KD_DKM_PBKDF: Z\n‐ KD_SK: Z\n‐ KH_Key_AES‐CMAC: Z\n‐ KH_Key_AES‐GMAC: Z\n‐ KH_Key_HMAC: Z\n‐ KH_Key_KMAC: Z\n‐ KTS_KDK_IFC: Z\n‐ KTS_KEK_IFC: Z\n‐ KTS_SS_IFC: Z\n‐ KAS_SS_ECC: Z\n‐ SC_EDK_AES: Z\n‐ SC_EDK_XTS: Z\nTable 19: Approved Services\nAll services implemented by the Module correspond to the functionality described by the fips_query function, which returns available services based on\nan operation_id input.\nThe fips_get_params function provides access to the current status of the Module as well as the name and version; this information correlates to the\nvalidation listing. A 1 value returned in status indicates the Module is running without error (FIPS_OK); a 0 return indicates an error (with additional error\ndetails indicated as described in the release specific API documentation). Services are only operational in the running state. Any attempts to access services\nin any other state will result in an error being returned. If the integrity test or any CAST fails then any attempt to access any service will result in an error\nbeing returned.\nThe OpenSSL toolkit OSSL_PROVIDER_get_params function is used to invoke fips_get_params, when called with the Module’s global handle and a pointer\nto a parameter structure (initialized using provider_gettable_params or the equivalent).\nRegarding the Indicator of approved security services, the Module conforms to FIPS 140‐3 IG 2.4.C Approved Security Service Indicator, similar to example\n2. Each service provides context sensitive status responses as described in the OpenSSL 3 API manual pages; generally, functions of return type int return\nthe value 1 for success with other error codes as appropriate for the call (described in API documentation).\nThe Module’s name and version parameters (as cited in Section 2) along with the Module’s internal indicators of the security‐check and conditional‐errors\nsettings are used to confirm the Module is the validated Module operating in the approved mode with only approved security services.\nNote that the caller provides the KAS_Private and KAS_Public keys for shared secret computation; the caller’s exchange and assurance of PSPs with the\nremote participant is outside the scope of the Module.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 26 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n4.4 Non‐Approved Services\nN/A for this Module.\n4.5 External Software/Firmware Loaded\nN/A for this Module.\n5 Software/Firmware Security\n5.1 Integrity Techniques\nThe Module uses HMAC‐SHA2‐256 as the approved integrity technique; the file fips.so.mac contains the integrity reference value. The Module is provided\nin an executable form (as fips.so shared object for use in Linux environments).\n5.2 Initiate on Demand\nThe operator can initiate the integrity test on demand by calling fips_self_test (invoked using OSSL_PROVIDER_self_test called with the Module’s global\nhandle) or reloading the Module.\n5.3 Open‐Source Parameters\nIn accordance with ISO/IEC 19790:2012 Annex B, as the Module is open source, the tools used to build the Module as tested are:\n gcc version 9.3.0\n perl v5.30.0\n gnu make v4.2.1\n6 Operational Environment\n6.1 Operational Environment Type and Requirements\nType of Operational Environment: Modifiable\nNo operational environment restrictions are required for operation in the approved mode. All conditions for operation of the Module in the approved\nmode are given in Section 2.4.\nThe Module conforms to FIPS 140‐3 IG 2.3.C Processor Algorithm Accelerators (PAA) and Processor Algorithm Implementation (PAI). The AES‐NI functions\nare identified by FIPS 140‐3 IG 2.3.C as a known PAA.\n7 Physical Security\nN/A for this Module.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 27 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n8 Non‐Invasive Security\nN/A for this Module.\n9 Sensitive Security Parameters Management\n9.1 Storage Areas\nStorage Area Name Description Persistence Type\nRAM R: Random access memory Dynamic\nTable 20: Storage Areas\n9.2 SSP Input‐Output Methods\nName From To Format\nType\nDistribution\nType\nEntry Type SFI or\nAlgorithm\nI Calling process Call stack (API) input parameters Plaintext Manual Electronic\nO Call stack (API) output parameters Calling process Plaintext Manual Electronic\nTable 21: SSP Input‐Output Methods\n9.3 SSP Zeroization Methods\nZeroization\nMethod\nDescription Rationale Operator Initiation\nC C (Cleanse): Caller invocation of openssl_cleanse. Overwrites with zeros Caller invocation of openssl_cleanse\nT T (Teardown): Module unload ‐ invokes cleanse internally. Overwrites with zeros Occurs when module is unloaded\nTable 22: SSP Zeroization Methods\nAll SSPs are zeroized (overwritten with 0s) when they are no longer needed:\n● CSPs and PSPs with a lifetime associated with an OpenSSL object (e.g., EVP_PKEY) are zeroized when freed or reinitialized. The OPENSSL_cleanse\nfunction is used to zeroize CSPs and PSPs owned by the caller.\n● CSPs with a lifetime associated with the Module are zeroized on Module uninstantiation (the Teardown operation).\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 28 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n9.4 SSPs\nName Description Size ‐ Strength Type ‐ Category Generated By Established\nBy\nUsed By\nDRBG_C Element of Hash DRBG\nstate.\nSize: 440‐888 ‐\nStrength: 160 ≤ s ≤ 256\nHash_DRBG_C ‐ CSP Random Random\nDRBG_EI Entropy input from an\nexternal source used\nfor DRBG seeding.\nSize: 128‐2^35 ‐\nStrength: 128 ≤ s ≤ 256\nOther ‐ CSP Random\nDRBG_Key Element of CTR DRBG\nor HMAC DRBG state.\nSize: 128‐256, 128‐256 ‐\nStrength: 128 ≤ s ≤ 256, 160 ≤ s ≤\n256\nCTR_DRBG_Key,\nHMAC_DRBG_Key ‐ CSP\nRandom Random\nDRBG_Seed Seed used for DRBG\nInstantiation and\nReseed.\nSize: 128‐256 ‐\nStrength: 128 ≤ s ≤ 256\nOther ‐ CSP Random Random\nDRBG_V Element of CTR, Hash\nor HMAC DRBG state.\nSize: 128‐256, 128‐256, 128‐256 ‐\nStrength: 128 ≤ s ≤ 256, 128 ≤ s ≤\n256, 128 ≤ s ≤ 256\nCTR_DRBG_Key, Hash_DRBG_Key,\nHMAC_DRBG_Key ‐ CSP\nRandom Random\nDS_SGK_ECC SigGen (private) key. Size: 233, 283, 409, 571, 233, 283,\n409, 571, 224, 256, 384, 521 ‐\nStrength: s = 112, s = 128, s = 192,\ns = 256, s = 112, s = 128, s = 192, s\n= 256, s = 112, s = 128, s = 192, s =\n256\nB‐233, B‐283, B‐409, B‐571, K‐233,\nK‐283, K‐409, K‐571, P‐224, P‐256,\nP‐384, P‐521 ‐ CSP\nSignature\nECDSA\nDS_SGK_Edwards SigGen (private) key. Size: 255, 448 ‐\nStrength: s = 128, s = 224\nEdwards25519, Edwards448 ‐ CSP Signature\nEDDSA\nDS_SGK_FFC SigGen (private) key. Size: 2048, 2048, 3072 ‐\nStrength: s = 112, s = 112, s = 128\nL=2048/N=224, L=2048/N=256,\nL=3072/N=256 ‐ CSP\nSignature DSA\nDS_SGK_IFC SigGen (private) key. Size: 2048, 3072, 4096, 6144,\n8192 ‐\nStrength: s = 112, s = 128, s = 152,\ns = 176, s = 200\nk=2048, k=3072, k=4096, k=6144,\nk=8192 ‐ CSP\nSignature RSA\nDS_SVK_ECC SigVer (public) key. Size: 163, 233, 283, 409, 571, 163,\n233, 283, 409, 571, 192, 224, 256,\n384, 521 ‐\nStrength: s < 112, s = 112, s = 128,\ns = 192, s = 256, s < 112, s = 112, s\n= 128, s = 192, s = 256, s < 112, s =\n112, s = 128, s = 192, s = 256\nB‐163, B‐233, B‐283, B‐409, B‐\n571, K‐163, K‐233, K‐283, K‐409,\nK‐571, P‐192, P‐224, P‐256, P‐384,\nP‐521 ‐ PSP\nSignature\nECDSA\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 29 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Description Size ‐ Strength Type ‐ Category Generated By Established\nBy\nUsed By\nDS_SVK_Edwards SigVer (public) key. Size: 255, 448 ‐\nStrength: s = 128, s = 224\nEdwards25519, Edwards448 ‐ PSP Signature\nEDDSA\nDS_SVK_FFC SigVer (public) key. Size: 1024, 2048, 2048, 3072 ‐\nStrength: s < 112, s = 112, s = 112,\ns = 128\nL=1024/N=160, L=2048/N=224,\nL=2048/N=256, L=3072/N=256 ‐\nPSP\nSignature DSA\nDS_SVK_IFC SigVer (public) key. Size: 1024, 2048, 3072, 4096,\n6144, 8192 ‐\nStrength: s ≤ 112, s = 112, s = 128,\ns = 152, s = 176, s = 200\nk=1024, k=2048, k=3072, k=4096,\nk=6144, k=8192 ‐ PSP\nSignature RSA\nGKP_Private_ECC General ECDSA\n(private) key.\nSize: 233, 283, 409, 571, 233, 283,\n409, 571, 224, 256, 384, 521 ‐\nStrength: s = 112, s = 128, s = 192,\ns = 256, s = 112, s = 128, s = 192, s\n= 256, s = 112, s = 128, s = 192, s =\n256\nB‐233, B‐283, B‐409, B‐571, K‐233,\nK‐283, K‐409, K‐571, P‐224, P‐256,\nP‐384, P‐521 ‐ CSP\nKey\nmanagement\nECC\nKey\nmanagement\nECC\nGKP_Private_Edwards General EdDSA\n(private) key.\nSize: 255, 448 ‐\nStrength: s = 128, s = 224\nEdwards25519, Edwards448 ‐ CSP Key\nmanagement\nEdwards\nKey\nmanagement\nEdwards\nGKP_Private_FFC General FFC (private)\nkey.\nSize: 2048, 2048, 3072 ‐\nStrength: s = 112, s = 112, s = 128\nL=2048/N=224, L=2048/N=256,\nL=3072/N=256 ‐ CSP\nKey\nmanagement\nFFC\nKey\nmanagement\nFFC\nGKP_Private_IFC General RSA (private)\nkey.\nSize: 2048, 3072, 4096, 6144,\n8192 ‐\nStrength: s = 112, s = 128, s = 152,\ns = 176, s = 200\nk=2048, k=3072, k=4096, k=6144,\nk=8192 ‐ CSP\nKey\nmanagement\nIFC\nKey\nmanagement\nIFC\nGKP_Public_ECC General ECDSA (public)\nkey.\nSize: 233, 283, 409, 571, 233, 283,\n409, 571, 224, 256, 384, 521 ‐\nStrength: s = 112, s = 128, s = 192,\ns = 256, s = 112, s = 128, s = 192, s\n= 256, s = 112, s = 128, s = 192, s =\n256\nB‐233, B‐283, B‐409, B‐571, K‐233,\nK‐283, K‐409, K‐571, P‐224, P‐256,\nP‐384, P‐521 ‐ PSP\nKey\nmanagement\nECC\nKey\nmanagement\nECC\nGKP_Public_Edwards General EdDSA (public)\nkey.\nSize: 255, 448 ‐\nStrength: s = 128, s = 224\nEdwards25519, Edwards448 ‐ PSP Key\nmanagement\nEdwards\nKey\nmanagement\nEdwards\nGKP_Public_FFC General FFC (public)\nkey.\nSize: 2048, 2048, 3072 ‐\nStrength: s = 112, s = 112, s = 128\nL=2048/N=224, L=2048/N=256,\nL=3072/N=256 ‐ PSP\nKey\nmanagement\nFFC\nKey\nmanagement\nFFC\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 30 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Description Size ‐ Strength Type ‐ Category Generated By Established\nBy\nUsed By\nGKP_Public_IFC General RSA (public)\nkey.\nSize: 2048, 3072, 4096, 6144,\n8192 ‐\nStrength: s = 112, s = 128, s = 152,\ns = 176, s = 200\nk=2048, k=3072, k=4096, k=6144,\nk=8192 ‐ PSP\nKey\nmanagement\nIFC\nKey\nmanagement\nIFC\nKAS_Private_ECC Key pair component\nused for shared secret\ngeneration.\nSize: 233, 283, 409, 571, 233, 283,\n409, 571, 224, 256, 384, 521 ‐\nStrength: s = 112, s = 128, s = 192,\ns = 256, s = 112, s = 128, s = 192, s\n= 256, s = 112, s = 128, s = 192, s =\n256\nB‐233, B‐283, B‐409, B‐571, K‐233,\nK‐283, K‐409, K‐571, P‐224, P‐256,\nP‐384, P‐521 ‐ CSP\nKey agreement\nKAS_Private_FFC Key pair component\nused for shared secret\ngeneration.\nSize: 2048, 3072, 4096, 6144,\n8192 ‐\nStrength: s = 112, 112 ≤ s ≤ 128,\n112 ≤ s ≤ 152, 112 ≤ s ≤ 176, 112 ≤\ns ≤ 200\nffdhe2048, ffdhe3072, ffdhe4096,\nffdhe6144, ffdhe8192 ‐ CSP\nKey agreement\nKAS_Private_IFC Key pair component\nused for shared secret\ngeneration.\nSize: 2048, 3072, 4096, 6144,\n8192 ‐\nStrength: s = 112, s = 128, s = 152,\ns = 176, s = 200\nk=2048, k=3072, k=4096, k=6144,\nk=8192 ‐ CSP\nKey agreement\nKAS_Public_ECC Peer key pair\ncomponent used for\nshared secret\ngeneration.\nSize: 233, 283, 409, 571, 233, 283,\n409, 571, 224, 256, 384, 521 ‐\nStrength: s = 112, s = 128, s = 192,\ns = 256, s = 112, s = 128, s = 192, s\n= 256, s = 112, s = 128, s = 192, s =\n256\nB‐233, B‐283, B‐409, B‐571, K‐233,\nK‐283, K‐409, K‐571, P‐224, P‐256,\nP‐384, P‐521 ‐ PSP\nKey agreement\nKAS_Public_FFC Peer key pair\ncomponent used for\nshared secret\ngeneration.\nSize: 2048, 3072, 4096, 6144,\n8192 ‐\nStrength: s = 112, 112 ≤ s ≤ 128,\n112 ≤ s ≤ 152, 112 ≤ s ≤ 176, 112 ≤\ns ≤ 200\nffdhe2048, ffdhe3072, ffdhe4096,\nffdhe6144, ffdhe8192 ‐ PSP\nKey agreement\nKAS_Public_IFC Peer key pair\ncomponent used for\nshared secret\ngeneration.\nSize: 2048, 3072, 4096, 6144,\n8192 ‐\nStrength: s = 112, s = 128, s = 152,\ns = 176, s = 200\nk=2048, k=3072, k=4096, k=6144,\nk=8192 ‐ PSP\nKey agreement\nKAS_SS_ECC Shared secret\ncalculation z output\nvalue (for KDF).\nSize: 112 ‐ 256 ‐\nStrength: 112 ‐ 256\nOther ‐ CSP Key\nagreement\nKey agreement\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 31 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Description Size ‐ Strength Type ‐ Category Generated By Established\nBy\nUsed By\nKAS_SS_FFC Shared secret\ncalculation z output\nvalue (for KDF).\nSize: 112 ‐ 256 ‐\nStrength: 112 ‐ 200\nOther ‐ CSP Key\nagreement\nKey agreement\nKAS_SS_IFC Shared secret\ncalculation z output\nvalue (for KDF).\nSize: 112 ‐ 256 ‐\nStrength: 112 ‐ 200\nOther ‐ CSP Key\nagreement\nKey agreement\nKD_DKM_KDF Key derivation derived\nkeying material.\nSize: 128 ‐ 256 ‐\nStrength: 128 ‐ 256\nOther ‐ CSP Key derivation Key derivation\nKD_DKM_PBKDF PBKDF derived key\nmaterial\nSize: 128 ‐\nStrength: 128\nOther ‐ CSP Key derivation Key derivation\nKD_PW_PBKDF PBKDF password input. Size: 128 ‐\nStrength: 128\nOther ‐ CSP Key derivation Key derivation\nKD_SK Key derivation source\nkey material.\nSize: 128 ‐ 256 ‐\nStrength: 128 ‐ 256\nOther ‐ CSP Key derivation\nKH_Key_AES‐CMAC Keyed Hash key. Size: 128, 192, 256 ‐\nStrength: s = 128, s = 192, s = 256\nAES‐128, AES‐192, AES‐256 ‐ CSP MAC AES\n(CMAC, GMAC)\nKH_Key_AES‐GMAC Keyed Hash key. Size: 128, 192, 256 ‐\nStrength: s = 128, s = 192, s = 256\nAES‐128, AES‐192, AES‐256 ‐ CSP MAC AES\n(CMAC, GMAC)\nKH_Key_HMAC Keyed Hash key. Size: 112 ‐ 2048 ‐\nStrength: 112 ‐ 256\nOther ‐ CSP MAC HMAC\nKH_Key_KMAC Keyed Hash key. Size: 128, 256 ‐\nStrength: 112 ≤ s ≤ 128, 112 ≤ s ≤\n256\nKMAC128, KMAC256 ‐ CSP MAC KMAC\n(XOF)\nKTS_KDK_IFC RSA key de‐\nencapsulation Key (key\ntransport).\nSize: 2048, 3072, 4096, 6144 ‐\nStrength: s = 112, s = 128, s = 152,\ns = 176\nOther ‐ CSP Key transport\nKTS_KEK_IFC RSA key encapsulation\nKey (key transport).\nSize: 2048, 3072, 4096, 6144 ‐\nStrength: s = 112, s = 128, s = 152,\ns = 176\nOther ‐ PSP Key transport\nKTS_SS_IFC RSA key transport\nshared secret.\nSize: 112 ‐ 256 ‐\nStrength: s = 112 ‐ s = 176\nOther ‐ CSP Key\ntransport\nKey transport\nSC_EDK_AES Symmetric encryption\nand decryption.\nSize: 128, 192, 256 ‐\nStrength: s = 128, s = 192, s = 256\nAES‐128, AES‐192, AES‐256 ‐ CSP Cipher\n(Unauth)\nCipher (Auth)\nSC_EDK_XTS Symmetric encryption\nand decryption.\nSize: 256, 512 ‐\nStrength: s = 128, s = 256\nXTS‐128, XTS‐256 ‐ CSP Cipher\n(Unauth)\nTable 23: SSP Table 1\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 32 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Input ‐\nOutput\nStorage Storage Duration Zeroization Related SSPs\nDRBG_C I\nO\nRAM:Plaintext Call lifetime C DRBG_Seed:Derived From\nDRBG_V:Used with\nDRBG_EI I RAM:Plaintext Call lifetime C DRBG_Seed:Constituent\nDRBG_Key I\nO\nRAM:Plaintext Call lifetime (module up time for internal DRBG) C\nT\nDRBG_Seed:Derived From\nDRBG_V:Used with\nDRBG_Seed RAM:Plaintext Call lifetime C DRBG_C:Derives\nDRBG_Key:Derives\nDRBG_V:Derives\nDRBG_EI:Incorporates\nDRBG_V I\nO\nRAM:Plaintext Call lifetime (module up time for internal DRBG) C\nT\nDRBG_Seed:Derived From\nDRBG_Key:Used with\nDS_SGK_ECC I RAM:Plaintext Call lifetime C DS_SVK_ECC:Paired With\nDS_SGK_Edwards I RAM:Plaintext Call lifetime C DS_SVK_Edwards:Paired With\nDS_SGK_FFC I RAM:Plaintext Call lifetime C DS_SVK_FFC:Paired With\nDS_SGK_IFC I RAM:Plaintext Call lifetime C DS_SVK_IFC:Paired With\nDS_SVK_ECC I RAM:Plaintext Call lifetime C DS_SGK_ECC:Paired With\nDS_SVK_Edwards I RAM:Plaintext Call lifetime C DS_SGK_Edwards:Paired With\nDS_SVK_FFC I RAM:Plaintext Call lifetime C DS_SGK_FFC:Paired With\nDS_SVK_IFC I RAM:Plaintext Call lifetime C DS_SGK_IFC:Paired With\nGKP_Private_ECC O RAM:Plaintext Call lifetime C GKP_Public_ECC:Paired With\nGKP_Private_Edwards O RAM:Plaintext Call lifetime C GKP_Public_Edwards:Paired With\nGKP_Private_FFC O RAM:Plaintext Call lifetime C GKP_Public_FFC:Paired With\nGKP_Private_IFC O RAM:Plaintext Call lifetime C GKP_Public_IFC:Paired With\nGKP_Public_ECC O RAM:Plaintext Call lifetime C GKP_Private_ECC:Paired With\nGKP_Public_Edwards O RAM:Plaintext Call lifetime C GKP_Private_Edwards:Paired With\nGKP_Public_FFC O RAM:Plaintext Call lifetime C GKP_Private_FFC:Paired With\nGKP_Public_IFC O RAM:Plaintext Call lifetime C GKP_Private_IFC:Paired With\nKAS_Private_ECC I RAM:Plaintext Call lifetime C KAS_Public_ECC:Paired With\nKAS_Private_FFC I RAM:Plaintext Call lifetime C KAS_Public_FFC:Paired With\nKAS_Private_IFC I RAM:Plaintext Call lifetime C KAS_Public_IFC:Paired With\nKAS_Public_ECC I RAM:Plaintext Call lifetime C KAS_Private_ECC:Paired With\nKAS_Public_FFC I RAM:Plaintext Call lifetime C KAS_Private_FFC:Paired With\nKAS_Public_IFC I RAM:Plaintext Call lifetime C KAS_Private_IFC:Paired With\nKAS_SS_ECC O RAM:Plaintext Call lifetime C KAS_Private_ECC:Calculated From\nKAS_Public_ECC:Calculated From\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 33 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nName Input ‐\nOutput\nStorage Storage Duration Zeroization Related SSPs\nKAS_SS_FFC O RAM:Plaintext Call lifetime C KAS_Private_FFC:Calculated From\nKAS_Public_FFC:Calculated From\nKAS_SS_IFC O RAM:Plaintext Call lifetime C KAS_Private_IFC:Calculated From\nKAS_Public_IFC:Calculated From\nKD_DKM_KDF O RAM:Plaintext Call lifetime C KD_SK:Derived From\nKD_DKM_PBKDF O RAM:Plaintext Call lifetime C KD_PW_PBKDF:Derived From\nKD_PW_PBKDF I RAM:Plaintext Call lifetime C KD_DKM_PBKDF:Derives\nKD_SK I RAM:Plaintext Call lifetime C KD_DKM_KDF:Derives\nKH_Key_AES‐CMAC I RAM:Plaintext Call lifetime C\nKH_Key_AES‐GMAC I RAM:Plaintext Call lifetime C\nKH_Key_HMAC I RAM:Plaintext Call lifetime C\nKH_Key_KMAC I RAM:Plaintext Call lifetime C\nKTS_KDK_IFC I RAM:Plaintext Call lifetime C KTS_SS_IFC:Unwraps\nKTS_KEK_IFC I RAM:Plaintext Call lifetime C KTS_SS_IFC:Wraps\nKTS_SS_IFC O RAM:Plaintext Call lifetime C KTS_KDK_IFC:Unwrapped By\nKTS_KEK_IFC:Wrapped By\nSC_EDK_AES I RAM:Plaintext Call lifetime C\nSC_EDK_XTS I RAM:Plaintext Call lifetime C\nTable 24: SSP Table 2\nKeys used for CASTs and the temporary value used in the integrity test are not SSPs; however, the latter is deleted after use as required by AS05.10.\nThe Module maintains only the Counter DRBG state used for key generation as a persistent CSP; this DRBG instance is used exclusively for approved\nservices.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 34 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n9.5 Additional Information\nKey/Algorithm Type Equivalent Strengths: Reference sources for the strengths provided in SSP Table 1 are specified below. Equivalent strength is given\nfor each key or algorithm type (as some algorithms do not use or produce keys).\nBlock Cipher (and related functions):\n AES (AES‐128, AES‐192, AES‐256): SP 800‐57 Part 1 Rev. 5 Table 2.\nDigital Signature:\n ECC (B‐163, B‐233, B‐283, B‐409, B‐571, K‐163, K‐233, K‐283, K‐409, K‐571, P‐192, P‐224, P‐256, P‐384, P‐521): SP 800‐186 Table 1 (provides\napproximate elliptic curve security strengths). SP 800‐186 and FIPS 140‐3 IG C.K indicate that the Binary (B‐) and Koblitz (K‐) curves are deprecated.\n EdDSA (ED‐25519, ED‐448): SP 800‐186 Table 1.\n FFC (DSA: L=1024/N=160, L=2048/N=224, L=2048/N=256, L=3072/N=256): SP 800‐57 Part 1 Rev. 5 Table 2. Security strength for L=2048/N=256 is\ndetermined in accordance with FIPS 140‐3 IG D.B Strength of SSP Establishment Methods as y = min(x, N/2), where x is 112 and therefore y =\nmin(112, 128) = 112.\n IFC (RSA: k=1024, k=2048, k=3072, k=4096): SP 800‐57 Part 1 Rev. 5 Table 2.\nIn Digital Signature applications, security strength is primarily associated with the asymmetric key pair specification. The hash function used must have\nequivalent strength equal to or greater than the security strength of the associated key pair.\nSecure Hash (and related functions):\n SHA‐1, SHA2 (SHA2‐224, SHA2‐256, SHA2‐384, SHA2‐512, SHA2‐512/224, SHA2‐512/256): SP 800‐107 Rev. 1 Table 1.\n SHA3 (SHA3‐224, SHA3‐256, SHA3‐384, SHA3‐512): SP 800‐57 Part 1 Rev. 5 Table 3.\n SHAKE (SHAKE128, SHAKE256): SP 800‐185 Section 8.1.\nPreimage resistance strength applies to hash algorithms used in DRBG, KDFs. Described also in SP 800‐57 Part 1 Rev. 5 Table 3.\nMessage Authentication:\n KMAC (KMAC128, KMAC256): SP 800‐56C Rev. 2 Table 3.\nKey Agreement:\n KAS‐ECC‐SSC (B‐233, B‐283, B‐409, B‐571, K‐233, K‐283, K‐409, K‐571, P‐224, P‐256, P‐384, P‐521): SP 800‐56A Rev. 3 Table 24.\n KAS‐FFC‐SSC (FB, FC, ffdhe2048, ffdhe3072, ffdhe4096, ffdhe6144, ffdhe8192, modp‐2048, modp‐3072, modp‐4096, modp‐6144, modp‐8192): SP\n800‐56A Rev. 3 Tables 25 and 26.\n KAS‐IFC‐SSC (k=2048, k=3072, k=4096, k=6144, k=8192): SP 800‐56B Rev. 2 Table 4 (provides approximate security strengths).\nKey Agreement Key Derivation:\n KDA OneStep: SP 800‐56C Rev. 2 Table 1 (hash), Table 2 (HMAC) and Table 3 (KMAC).\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 35 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n10 Self‐Tests\n10.1 Pre‐Operational Self‐Tests\nAlgorithm\nor Test\nTest Properties Test Method Test Type Indicator Details\nSW Integrity HMAC‐SHA2‐256 #A4481 HMAC over the complete module file image SW/FW Integrity FIPS_OK or PROV_R_FIPS_MODULE_IN_ERROR_STATE\nTable 25: Pre‐Operational Self‐Tests\n10.2 Conditional Self‐Tests\nAlgorithm or\nTest\nTest Properties Test\nMethod\nTest\nType\nIndicator Details Conditions\nAES‐ECB 128‐bit KAT CAST FIPS_OK Encrypt Performed on module load.\nAES‐ECB 128‐bit KAT CAST FIPS_OK Decrypt Performed on module load.\nAES‐GCM 256‐bit KAT CAST FIPS_OK Encrypt Performed on module load.\nAES‐GCM 256‐bit KAT CAST FIPS_OK Decrypt Performed on module load.\nCounter DRBG AES‐128 with derivation\nfunction\nKAT CAST FIPS_OK Instantiate, Generate, Reseed Performed on module load.\nDSA SigGen\n(FIPS186‐4)\n2048‐bit with SHA2‐384 KAT CAST FIPS_OK Sign Performed on module load.\nDSA SigVer\n(FIPS186‐4)\n2048‐bit with SHA2‐384 KAT CAST FIPS_OK Verify Performed on module load.\nECDSA SigGen\n(FIPS186‐4)\nP‐224 with SHA2‐512 KAT CAST FIPS_OK Sign Performed on module load.\nECDSA SigVer\n(FIPS186‐4)\nP‐224 with SHA2‐512 KAT CAST FIPS_OK Verify Performed on module load.\nEDDSA ED448\nSigGen\nEdwards448 SigGen with SHA2‐\n256\nKAT CAST FIPS_OK Sign Performed on module load.\nEDDSA ED448\nSigVer\nEdwards448 SigVer with SHA2‐\n256\nKAT CAST FIPS_OK Verify Performed on module load.\nEDDSA ED25519\nSigGen\nEdwards25519 SigGen with\nSHA2‐512\nKAT CAST FIPS_OK Sign Performed on module load.\nEDDSA ED25519\nSigVer\nEdwards25519 SigVer with\nSHA2‐512\nKAT CAST FIPS_OK Verify Performed on module load.\nHash DRBG SHA2‐256 KAT CAST FIPS_OK Instantiate, Generate, Reseed Performed on module load.\nHMAC DRBG SHA‐1 KAT CAST FIPS_OK Instantiate, Generate, Reseed Performed on module load.\nHMAC‐SHA2‐256 SHA2‐256 with a 256‐bit key KAT CAST FIPS_OK Generate Performed on module load.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 36 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm or\nTest\nTest Properties Test\nMethod\nTest\nType\nIndicator Details Conditions\nKAS‐ECC‐SSC\nSp800‐56Ar3\nP‐256 KAT CAST FIPS_OK Ephemeral Unified Shared Secret\n(Z) Computation\nPerformed on module load.\nKAS‐FFC‐SSC\nSp800‐56Ar3\nL=2048/N=256 KAT CAST FIPS_OK dhEphem Shared Secret (Z)\nComputation\nPerformed on module load.\nKAS‐IFC‐SSC k=2048 KAT CAST FIPS_OK SP 800‐56B Rev. 2 Section 8.2.2 RSA\nPrimitive Computation\nPerformed on module load.\nKAS‐KDF\nOneStep SP800‐\n56Cr2\nSHA2‐224 KAT CAST FIPS_OK SP 800‐56C Rev. 2 Section 4\nOneStep KDF (AKA OpenSSL single‐\nstep or SS‐KDF)\nPerformed on module load.\nKAS‐KDF\nTwoStep SP800‐\n56Cr2\nSHA2‐256 KAT CAST FIPS_OK SP 800‐56C Rev. 2 Section 5\nTwoStep KDF (HKDF variant)\nPerformed on module load.\nKDF ANS 9.42 Fixed input KAT KAT CAST FIPS_OK SP 800‐135 Rev. 1 Section 5.1 ANSI\nX9.42‐2001 KDF KAT\nPerformed on module load.\nKDF ANS 9.63 Fixed input KAT KAT CAST FIPS_OK SP 800‐135 Rev. 1 Section 5.1\nX9.63‐2001 KDF KAT\nPerformed on module load.\nKDF SP800‐108 HMAC‐SHA2‐256 KAT CAST FIPS_OK SP 800‐108 Rev. 1 Section 4.1 KAT\nfor a Counter Mode KDF\nPerformed on module load.\nKDF SSH Fixed input KAT KAT CAST FIPS_OK SP 800‐135 Rev. 1 Section 5.2\nSSHv2 KDF KAT\nPerformed on module load.\nKTS‐IFC k=2048 KAT CAST FIPS_OK SP 800‐56B Rev. 2 Decrypt for CRT Performed on module load.\nKTS‐IFC k=2048 KAT CAST FIPS_OK SP 800‐56B Rev. 2 Encrypt for Basic Performed on module load.\nKTS‐IFC k=2048 KAT CAST FIPS_OK SP 800‐56B Rev. 2 Decrypt for Basic Performed on module load.\nPBKDF SHA2‐256, 24‐byte password,\n36‐byte salt, iteration count of\n4096\nKAT CAST FIPS_OK SP 800‐132 Section 5.3 KAT of\nMaster Key derivation\nPerformed on module load.\nRSA SigGen\n(FIPS186‐4)\nk=2048 with SHA2‐256 KAT CAST FIPS_OK Sign Performed on module load.\nRSA SigVer\n(FIPS186‐4)\nk=2048 with SHA2‐256 KAT CAST FIPS_OK Verify Performed on module load.\nSHA‐1 SHA‐1 KAT CAST FIPS_OK Simple SHA KAT Performed on module load.\nSHA2‐512 SHA2‐512 KAT CAST FIPS_OK Simple SHA KAT Performed on module load.\nSHA3‐256 SHA3‐256 KAT CAST FIPS_OK Simple SHA KAT Performed on module load.\nTLS v1.2 KDF\nRFC7627\nFixed input KAT KAT CAST FIPS_OK SP 800‐135 Rev. 1 Section 4.2.2 TLS\n1.2 KAT\nPerformed on module load.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 37 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm or\nTest\nTest Properties Test\nMethod\nTest\nType\nIndicator Details Conditions\nTLS v1.3 KDF Fixed input KAT KAT CAST FIPS_OK RFC8446 Section 7.1 TLS v1.3 KDF\nKAT\nPerformed on module load.\nDSA KeyGen\n(FIPS186‐4)\nPCT performed using the\ngenerated key pair\nPCT PCT FIPS_OK Sign, Verify Performed on FFC (DSA, KAS‐FFC‐SSC) key pair\ngeneration, prior to returning the key pair on\nconclusion of the call.\nECDSA KeyGen\n(FIPS186‐4)\nPCT performed using the\ngenerated key pair\nPCT PCT FIPS_OK Sign, Verify Performed on ECC (ECDSA) key pair generation,\nprior to returning the key pair on conclusion of\nthe call.\nEDDSA KeyGen PCT performed using the\ngenerated key pair\nPCT PCT FIPS_OK Sign, Verify Performed on Edwards (EdDSA) key pair\ngeneration, prior to returning the key pair on\nconclusion of the call.\nRSA KeyGen\n(FIPS186‐4)\nPCT performed using the\ngenerated key pair\nPCT PCT FIPS_OK Sign, Verify Performed on IFC (RSA, KAS‐IFC‐SSC, KTS‐IFC) key\npair generation, prior to returning the key pair on\nconclusion of the call.\nTable 26: Conditional Self‐Tests\nThe intended usage of asymmetric key pairs generated by the Module is not known at the time when the key pair is generated and the pairwise consistency\ntest (PCT) is performed. In all cases, a sign and verify PCT is performed.\n10.3 Periodic Self‐Test Information\nAlgorithm or Test Test Method Test Type Period Periodic Method\nSW Integrity HMAC over the complete\nmodule file image\nSW/FW Integrity On demand Module load\nTable 27: Pre‐Operational Periodic Information\nAlgorithm or Test Test Method Test Type Period Periodic Method\nAES‐ECB KAT CAST On demand On power on or reset\nAES‐ECB KAT CAST On demand On power on or reset\nAES‐GCM KAT CAST On demand On power on or reset\nAES‐GCM KAT CAST On demand On power on or reset\nCounter DRBG KAT CAST On demand On power on or reset\nDSA SigGen (FIPS186‐4) KAT CAST On demand On power on or reset\nDSA SigVer (FIPS186‐4) KAT CAST On demand On power on or reset\nECDSA SigGen (FIPS186‐4) KAT CAST On demand On power on or reset\nECDSA SigVer (FIPS186‐4) KAT CAST On demand On power on or reset\nEDDSA ED448 SigGen KAT CAST On demand On power on or reset\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 38 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\nAlgorithm or Test Test Method Test Type Period Periodic Method\nEDDSA ED448 SigVer KAT CAST On demand On power on or reset\nEDDSA ED25519 SigGen KAT CAST On demand On power on or reset\nEDDSA ED25519 SigVer KAT CAST On demand On power on or reset\nHash DRBG KAT CAST On demand On power on or reset\nHMAC DRBG KAT CAST On demand On power on or reset\nHMAC‐SHA2‐256 KAT CAST On demand On power on or reset\nKAS‐ECC‐SSC Sp800‐56Ar3 KAT CAST On demand On power on or reset\nKAS‐FFC‐SSC Sp800‐56Ar3 KAT CAST On demand On power on or reset\nKAS‐IFC‐SSC KAT CAST On demand On power on or reset\nKAS‐KDF OneStep SP800‐56Cr2 KAT CAST On demand On power on or reset\nKAS‐KDF TwoStep SP800‐56Cr2 KAT CAST On demand On power on or reset\nKDF ANS 9.42 KAT CAST On demand On power on or reset\nKDF ANS 9.63 KAT CAST On demand On power on or reset\nKDF SP800‐108 KAT CAST On demand On power on or reset\nKDF SSH KAT CAST On demand On power on or reset\nKTS‐IFC KAT CAST On demand On power on or reset\nKTS‐IFC KAT CAST On demand On power on or reset\nKTS‐IFC KAT CAST On demand On power on or reset\nPBKDF KAT CAST On demand On power on or reset\nRSA SigGen (FIPS186‐4) KAT CAST On demand On power on or reset\nRSA SigVer (FIPS186‐4) KAT CAST On demand On power on or reset\nSHA‐1 KAT CAST On demand On power on or reset\nSHA2‐512 KAT CAST On demand On power on or reset\nSHA3‐256 KAT CAST On demand On power on or reset\nTLS v1.2 KDF RFC7627 KAT CAST On demand On power on or reset\nTLS v1.3 KDF KAT CAST On demand On power on or reset\nDSA KeyGen (FIPS186‐4) PCT PCT On demand On power on or reset\nECDSA KeyGen (FIPS186‐4) PCT PCT On demand On power on or reset\nEDDSA KeyGen PCT PCT On demand On power on or reset\nRSA KeyGen (FIPS186‐4) PCT PCT On demand On power on or reset\nTable 28: Conditional Periodic Information\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 39 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n10.4 Error States\nName Description Conditions Recovery Method Indicator\nSelf‐test\nfailure\nThe self‐test failure error\nstate\nIf one of the KATs fails or integrity test\nfails\nReload the Module into\nmemory\nPROV_R_FIPS_MODULE_IN_ERROR_STATE\nTable 29: Error States\n10.5 Operator Initiation of Self‐Tests\nEach time the Module is powered up it tests that the cryptographic algorithms still operate correctly and that sensitive data has not been damaged. The\npre‐operational self‐tests are available on demand by reloading the Module.\nOn instantiation, the Module performs the pre‐operational self‐test and all CASTs. All KATs must complete successfully prior to any other use of\ncryptography by the Module.\nThe fips_self_test function (inclusive of software integrity verification) can also be called on demand, fulfilling AS05.11.\n11 Life‐Cycle Assurance\n11.1 Installation, Initialization, and Startup Procedures\nDuring the manufacturing process, SSH Communications Security, Oyj. (SSH) executes the build and installation instructions for the Module. The Module\nis pre‐installed and configured in supported SSH solutions. The approved mode is enabled by default. There are no additional installation, configuration,\nor usage instructions for operators intending to use the Module.\n11.2 Administrator Guidance\nGuidance Documentation is inclusive of all information required per ISO/IEC 19790:2012 Section 7.11.9.\n11.3 Non‐Administrator Guidance\nN/A for this Module.\n11.4 Design and Rules\nThe inherent properties of the Module are:\n1. Manual key entry is not supported.\n2. Data output is inhibited during self‐tests, zeroization, SSP generation, and error states.\n3. The Module does not perform any cryptographic function if any self‐test has failed.\nFIPS 140‐3 Security Policy SSH Communications Security Cryptographic Module\nCopyright © 2025 SSH Communications Security, Oyj. Page 40 of 40\nThis non‐proprietary Security Policy document may be freely reproduced and distributed in its entirety without modification.\n12 Mitigation of Other Attacks\n12.1 Attack List\nThe Module implements mitigations for constant‐time implementations and blinding attacks.\n12.2 Mitigation Effectiveness\nConstant‐time implementations protect cryptographic implementations in the Module against timing analysis since such attacks exploit differences in\nexecution time depending on the cryptographic operation, and constant‐time implementations ensure that the variations in execution time cannot be\ntraced back to the key, CSP or secret data.\nNumeric blinding protects the RSA, DSA and ECDSA algorithms from timing attacks. These algorithms are vulnerable to such attacks since attackers can\nmeasure the time of signature operations or RSA decryption. To mitigate this, the Module generates a random blinding factor which is provided as an\ninput to the decryption/signature operation and is discarded once the operation has completed and resulted in an output. This makes it difficult for\nattackers to attempt timing attacks on such operations without the knowledge of the blinding factor, and therefore the execution time cannot be\ncorrelated to the RSA/DSA/ECDSA key.\n12.3 Guidance and Constraints\nThe mitigation mechanisms described in Section 12.2 are inherent within the validated algorithms. No other guidance or constraints are specified."
    }
  }
}